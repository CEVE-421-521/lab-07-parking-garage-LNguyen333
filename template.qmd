---
title: "Lab 7: Parking Garage Case Study"
author: "Leanh Nguyen"
jupyter: julia-1.10
date: 2024-03-08
categories: [Lab]

format: 
    html: default

    # YOU DO NOT NEED BOTH PDF AND DOCX.
    # COMMENT OR DELETE THE ONE YOU DON'T WANT TO USE.
    # pdf:
    #     documentclass: article
    #     fontsize: 11pt
    #     geometry:
    #         - margin=1in  
    #     number-sections: true
    #     code-line-numbers: true
    docx: 
       toc: true
       fig-format: png
       number-sections: true
       code-line-numbers: true

date-format: "ddd., MMM. D"
references: references.bib
---

# Setup

## Load packages


```{julia}
using Revise
using ParkingGarage
using Random
using Distributions
```

and also regular packages

```{julia}
using Plots
Plots.default(; margin=5Plots.mm)
```

## Formal problem framing

The paper uses an exponential growth model for demand, but we'll use a linear one.

```{julia}
#| code-fold: true
let
    sow = ParkingGarageSOW()
    years = 1:(sow.n_years)
    demand = [
        ParkingGarage.calculate_demand(year, sow.demand_growth_rate) for year in years
    ]
    plot(
        years,
        demand;
        ylabel="Demand [cars/day]",
        xlabel="Year",
        legend=false,
        title="Demand Growth Rate: $(sow.demand_growth_rate) Cars/Year",
        size=(800, 400),
        marker=:circle,
    )
end
```

# Deterministic Case

## Static Policy

This function assumes that the demand is deterministic and that the number of levels is fixed.
The decision variable is the number of levels of the garage to build.
If we consider a single SOW, we can calculate the NPV of the profits for a given policy.

```{julia}
let
    sow = ParkingGarageSOW(; demand_growth_rate=80.0, n_years=20, discount_rate=0.12)
    n_levels = 2:12
    policies = [StaticPolicy(i) for i in n_levels]
    println(policies)
    profits = [simulate(sow, policy) for policy in policies]
    plot(
        n_levels,
        profits;
        ylabel="NPV Profits [Million USD]",
        xlabel="Number of levels",
        legend=false,
        title="$(sow.n_years) Year Horizon, $(sow.discount_rate) Discount, $(sow.demand_growth_rate) Demand Growth, Static Policy, Deterministic Case",
        size=(800, 400),
        titlefontsize=10,
        marker=:circle,
        xticks=n_levels,
    )
    hline!([0])
end
```

## Adaptive Policy

This function assumes that the demand is deterministic and that the number of levels is adaptive.
The decision variable is the number of levels of the garage to build.
If we consider a single SOW, we can calculate the NPV of the profits for a given policy.

```{julia} 
let
    sow = ParkingGarageSOW(; demand_growth_rate=80.0, n_years=20, discount_rate=0.12)
    n_levels_init = 2:12
    policies = [AdaptivePolicy(i) for i in n_levels_init]
    println(policies)
    profits = [simulate(sow, policy) for policy in policies]
    plot( 
        n_levels_init,
        profits;
        ylabel="NPV Profits [Million USD]",
        xlabel="Number of levels",
        legend=false,
        title="$(sow.n_years) Year Horizon, $(sow.discount_rate) Discount, $(sow.demand_growth_rate) Demand Growth, Adaptive Policy, Deterministic Case",
        size=(800, 400),
        titlefontsize=10,
        marker=:circle,
        xticks=n_levels_init,
    )
    hline!([0])
end
```

# Stochastic Case

Figure 1 of @deneufville_parkinggarage:2006 shows how the NPV changes when uncertainty is added to the model.
Reproduce this figure, using our model.
Specifically:

1. Generate an ensemble of SOWs. Justify how you are sampling the three parameters (`n_years`, `demand_growth_rate`, and `discount_rate`). I suggest to keep `n_years` as a constant, and perhaps to keep the discount rate constant as well.

```{julia}

# Parameters
n_years = 20 # Constant value for the number of years
discount_rate = 0.12 # Constant value for the discount rate
levels = 2:12  # Number of levels range

# Function to generate an ensemble of SOWs
function generate_sows(num_sows::Int)
    sow_ensemble = []
    for _ in 1:num_sows
        # Sample demand growth rate from a normal distribution
        demand_growth_rate = rand(Normal(80.0, 10.0))  # Mean = 80.0, Standard deviation = 10.0
        
        # Create sow object with sampled parameters
        sow = ParkingGarageSOW(demand_growth_rate=demand_growth_rate,
                                n_years=n_years,
                                discount_rate=discount_rate)
        
        push!(sow_ensemble, sow) # update ensemble of SOWs
    end
    return sow_ensemble
end
```

1. For each SOW, calculate the NPV for each policy.
1. Calculate the average NPV for each number of levels and plot.

Once you've implemented this function, you can simulate the adaptive policy and compare the NPV to the static policy.
Compare the fixed and adaptive policies for both the deterministic (single SOW) and stochastic (ensemble of SOWs) cases.
Plot the NPV as a function of the number of levels for each case.
- Deterministic: For all levels, the adaptive policy has a higher average NPV than the static policy
- Stochastic: Up to 10 levels, the adaptive policy has a higher average NPV than the static policy. Above 10 levels, both policies have similar NPVs.
- Overall, these pieces of data illustrate that implementing adaptive policy for a parking garage is the better choice as seen from its higher NPV. In other words, building a garage that is strong enough to construct more levels in the future (i.e., adaptive policy) is better financially than building a garage with a fixed number of levels that cannot be changed (i.e., static/fixed policy).

```{julia}
# Function to calculate NPV for each policy for a given SOW
function calculate_npv(sow, num_levels)
    static_npv = simulate(sow, StaticPolicy(num_levels))
    adaptive_npv = simulate(sow, AdaptivePolicy(num_levels))
    return static_npv, adaptive_npv
end

# Function to calculate average NPV for each number of levels across all SOWs
function calculate_average_npv(ensemble, num_levels)
    static_npv_avg = []
    adaptive_npv_avg = []
    # Across all SOWs, calculate NPV for each policy
    for sow in ensemble
        static_npv, adaptive_npv = calculate_npv(sow, num_levels)
        push!(static_npv_avg, static_npv)
        push!(adaptive_npv_avg, adaptive_npv)
    end
    # average NPV
    static_npv_avg = mean(static_npv_avg)
    adaptive_npv_avg = mean(adaptive_npv_avg)
    return static_npv_avg, adaptive_npv_avg
end

# Number of SOWs -> can be changed
num_sows = 10

# Generate an ensemble of SOWs
ensemble = generate_sows(num_sows)

# Define the range of number of levels
num_levels_range = 2:12

# Calculate average NPV for each number of levels
static_npv_avg_list = []
adaptive_npv_avg_list = []

for num_levels in num_levels_range
    static_npv_avg, adaptive_npv_avg = calculate_average_npv(ensemble, num_levels)
    push!(static_npv_avg_list, static_npv_avg)
    push!(adaptive_npv_avg_list, adaptive_npv_avg)
end

# Plot the average NPV as a function of the number of levels for both policies
plot(
    num_levels_range, static_npv_avg_list, label="Static Policy",
    xlabel="Number of Levels", ylabel="Average NPV",
    title="Stochastic Cases: Average NPV vs. Number of Levels",
    titlefontsize=10,
    marker=:circle,
)
plot!(
    num_levels_range, adaptive_npv_avg_list, label="Adaptive Policy",
    marker=:square,
)
```

